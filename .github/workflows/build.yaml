name: Build

on:
    push: ~
    pull_request: ~
    release:
        types: [created]
    schedule:
        -
            cron: "0 1 * * 6" # Run at 1am every Saturday
    workflow_dispatch: ~

jobs:
    tests:
        runs-on: ubuntu-latest

        name: "Sylius ${{ matrix.sylius }}, PHP ${{ matrix.php }}, Symfony ${{ matrix.symfony }}, ${{ matrix.database == 'mysql' && format('MySQL {0}', matrix.mysql) || matrix.database == 'postgres' && format('PostgreSQL {0}', matrix.postgres) }}, State Machine Adapter ${{ matrix.state_machine_adapter }}"

        strategy:
            fail-fast: false
            matrix:
                php: ["8.2", "8.3"]
                symfony: ["^6.4", "^7.1"]
                sylius: ["~2.0.1"]
                database: ["mysql", "postgres"]
                mysql: ["8.4"]
                postgres: ["15.8"]
                node: ["20.x"]
                state_machine_adapter: ["symfony_workflow"]

                include:
                    -   php: "8.3"
                        symfony: "^7.1"
                        database: "mysql"
                        sylius: "~2.0.1"
                        mysql: "8.4"
                        node: "20.x"
                        state_machine_adapter: "winzou_state_machine"

        env:
            APP_ENV: test
            DATABASE_URL: ${{ matrix.database == 'mysql' && format('mysql://root:root@127.0.0.1/sylius?serverVersion={0}', matrix.mysql) || format('pgsql://postgres:postgres@127.0.0.1/sylius?serverVersion={0}', matrix.postgres) }}
            TEST_SYLIUS_STATE_MACHINE_ADAPTER: "${{ matrix.state_machine_adapter }}"

        steps:
            -
                uses: actions/checkout@v4

            -
                name: Setup PHP
                uses: shivammathur/setup-php@v2
                with:
                    php-version: "${{ matrix.php }}"
                    extensions: intl
                    tools: symfony
                    coverage: none

            -
                name: Setup Node
                uses: actions/setup-node@v4
                with:
                    node-version: "${{ matrix.node }}"

            -
                name: Shutdown default database services
                run: |
                    sudo service mysql stop || true
                    sudo service postgresql stop || true

            -
                name: Setup MySQL
                if: matrix.database == 'mysql'
                uses: mirromutth/mysql-action@v1.1
                with:
                    mysql version: "${{ matrix.mysql }}"
                    mysql root password: "root"

            -
                name: Setup PostgreSQL
                if: matrix.database == 'postgres'
                uses: harmon758/postgresql-action@v1
                with:
                    postgresql version: "${{ matrix.postgres }}"
                    postgresql password: "postgres"

            -
                name: Run Chrome Headless
                run: google-chrome-stable --enable-automation --disable-background-networking --no-default-browser-check --no-first-run --disable-popup-blocking --disable-default-apps --allow-insecure-localhost --disable-translate --disable-extensions --no-sandbox --enable-features=Metal --headless --remote-debugging-port=9222 --window-size=2880,1800 --proxy-server='direct://' --proxy-bypass-list='*' http://127.0.0.1 > /dev/null 2>&1 &

            -
                name: Install certificates
                run: (cd tests/Application && symfony server:ca:install)

            -
                name: Run webserver
                run: (cd tests/Application && symfony server:start --port=8080 --dir=public --daemon)

            -
                name: Get Composer cache directory
                id: composer-cache
                run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

            -
                name: Cache Composer
                uses: actions/cache@v4
                with:
                    path: ${{ steps.composer-cache.outputs.dir }}
                    key: ${{ runner.os }}-php-${{ matrix.php }}-composer-${{ hashFiles('**/composer.json **/composer.lock') }}
                    restore-keys: |
                        ${{ runner.os }}-php-${{ matrix.php }}-composer-

            -
                name: Restrict Symfony version
                if: matrix.symfony != ''
                run: |
                    composer global config --no-plugins allow-plugins.symfony/flex true
                    composer global require --no-progress --no-scripts --no-plugins "symfony/flex:^2.4"
                    composer config --no-plugins allow-plugins.symfony/thanks true
                    composer config extra.symfony.require "${{ matrix.symfony }}"

            -
                name: Restrict Sylius version
                if: matrix.sylius != ''
                run: composer require "sylius/sylius:${{ matrix.sylius }}" --no-update --no-scripts --no-interaction

            -
                name: Require Winzou State Machine
                if: "${{ matrix.state_machine_adapter == 'winzou_state_machine' }}"
                run: |
                    composer require winzou/state-machine:^0.4 --no-update   
                    composer require winzou/state-machine-bundle:^0.6 --no-update   

            -
                name: Install PHP dependencies
                run: composer install --no-interaction

            -
                name: Get Yarn cache directory
                id: yarn-cache
                run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT

            -
                name: Cache Yarn
                uses: actions/cache@v4
                with:
                    path: ${{ steps.yarn-cache.outputs.dir }}
                    key: ${{ runner.os }}-node-${{ matrix.node }}-yarn-${{ hashFiles('**/package.json **/yarn.lock') }}
                    restore-keys: |
                        ${{ runner.os }}-node-${{ matrix.node }}-yarn-

            -
                name: Install JS dependencies
                run: (cd tests/Application && yarn install)

            -
                name: Prepare test application database
                run: |
                    (cd tests/Application && bin/console doctrine:database:create -vvv)
                    (cd tests/Application && bin/console doctrine:migrations:migrate -n -vvv -q)

            -
                name: Test migrations generation directory
                run: |
                    cp etc/travis/Order.php src/Entity
                    cp etc/travis/resources.yaml tests/Application/config/packages/
                    (cd tests/Application && bin/console doctrine:migrations:diff -q)
                    COUNT=$(ls tests/Application/src/Migrations/ | wc -l)
                    if [ $COUNT == 0 ]; then exit 1; fi
                    rm src/Entity/Order.php
                    rm tests/Application/config/packages/resources.yaml

            -
                name: Prepare test application assets
                run: |
                    (cd tests/Application && bin/console assets:install public -vvv)
                    (cd tests/Application && yarn build:prod)

            -
                name: Prepare test application cache
                run: (cd tests/Application && bin/console cache:warmup -vvv)

            -
                name: Load fixtures in test application
                run: (cd tests/Application && bin/console sylius:fixtures:load -n)

            -
                name: Run security check
                run: symfony security:check

            -
                name: Run ECS
                run: vendor/bin/ecs check

            -
                name: Validate composer.json
                run: composer validate --ansi --strict

            -
                name: Run analysis
                run: composer analyse

            -
                name: Run PHPStan
                run: vendor/bin/phpstan analyse -c phpstan.neon.dist src/

            -
                name: Run PHPSpec
                run: vendor/bin/phpspec run --ansi -f progress --no-interaction

            -
                name: Run PHPUnit
                run: vendor/bin/phpunit --colors=always

            -
                name: Run Behat
                run: vendor/bin/behat --colors --strict -vvv --no-interaction -f progress || vendor/bin/behat --colors --strict -vvv --no-interaction -f progress --rerun

            -
                name: Upload Behat logs
                uses: actions/upload-artifact@v4
                if: failure()
                with:
                    name: "Behat logs - ${{ matrix.sylius }}-${{ github.run_id }}-${{ github.run_number }}"
                    path: etc/build/
                    if-no-files-found: ignore
                    compression-level: 6
                    overwrite: true
